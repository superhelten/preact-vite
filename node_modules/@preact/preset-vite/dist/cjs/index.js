"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __spreadArray = (this && this.__spreadArray) || function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
exports.__esModule = true;
exports.preact = void 0;
var vite_1 = __importDefault(require("@prefresh/vite"));
var devtools_js_1 = require("./devtools.js");
var utils_js_1 = require("./utils.js");
var core_1 = require("@babel/core");
// Taken from https://github.com/vitejs/vite/blob/main/packages/plugin-react/src/index.ts
function preactPlugin(_a) {
    var _b;
    var _c = _a === void 0 ? {} : _a, devtoolsInProd = _c.devtoolsInProd, include = _c.include, exclude = _c.exclude, babel = _c.babel;
    var config;
    var babelOptions = __assign({ babelrc: false, configFile: false }, babel);
    babelOptions.plugins || (babelOptions.plugins = []);
    babelOptions.presets || (babelOptions.presets = []);
    babelOptions.overrides || (babelOptions.overrides = []);
    babelOptions.parserOpts || (babelOptions.parserOpts = {});
    (_b = babelOptions.parserOpts).plugins || (_b.plugins = []);
    var shouldTransform = utils_js_1.createFilter(include || [/\.[tj]sx?$/], exclude || [/node_modules/]);
    var jsxPlugin = {
        name: "vite:preact-jsx",
        enforce: "pre",
        config: function () {
            return {
                optimizeDeps: {
                    include: ["preact/jsx-runtime", "preact/jsx-dev-runtime"]
                }
            };
        },
        configResolved: function (resolvedConfig) {
            config = resolvedConfig;
        },
        transform: function (code, url) {
            return __awaiter(this, void 0, void 0, function () {
                var id, parserPlugins, result;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            id = utils_js_1.parseId(url).id;
                            if (!shouldTransform(id))
                                return [2 /*return*/];
                            parserPlugins = [
                                "importMeta",
                                // This plugin is applied before esbuild transforms the code,
                                // so we need to enable some stage 3 syntax that is supported in
                                // TypeScript and some environments already.
                                "topLevelAwait",
                                "classProperties",
                                "classPrivateProperties",
                                "classPrivateMethods",
                                !id.endsWith(".ts") && "jsx",
                                /\.tsx?$/.test(id) && "typescript",
                            ].filter(Boolean);
                            return [4 /*yield*/, core_1.transformAsync(code, __assign(__assign({}, babelOptions), { ast: true, root: config.root, filename: id, parserOpts: __assign(__assign({}, babelOptions.parserOpts), { sourceType: "module", allowAwaitOutsideFunction: true, plugins: parserPlugins }), generatorOpts: __assign(__assign({}, babelOptions.generatorOpts), { decoratorsBeforeExport: true }), plugins: __spreadArray(__spreadArray(__spreadArray([], babelOptions.plugins), [
                                        [
                                            config.isProduction
                                                ? "@babel/plugin-transform-react-jsx"
                                                : "@babel/plugin-transform-react-jsx-development",
                                            {
                                                runtime: "automatic",
                                                importSource: "preact"
                                            },
                                        ]
                                    ]), (config.isProduction ? [] : ["babel-plugin-transform-hook-names"])), sourceMaps: true, inputSourceMap: false }))];
                        case 1:
                            result = _a.sent();
                            // NOTE: Since no config file is being loaded, this path wouldn't occur.
                            if (!result)
                                return [2 /*return*/];
                            return [2 /*return*/, {
                                    code: result.code || code,
                                    map: result.map
                                }];
                    }
                });
            });
        }
    };
    return [
        {
            name: "preact:config",
            config: function () {
                return {
                    resolve: {
                        alias: {
                            "react-dom/test-utils": "preact/test-utils",
                            "react-dom": "preact/compat",
                            react: "preact/compat"
                        }
                    }
                };
            }
        },
        jsxPlugin,
        devtools_js_1.preactDevtoolsPlugin({ injectInProd: devtoolsInProd, shouldTransform: shouldTransform }),
        vite_1["default"]({ include: include, exclude: exclude }),
    ];
}
exports.preact = preactPlugin;
exports["default"] = preactPlugin;
