import { normalizePath } from "vite";
import path from "path";
import debug from "debug";
import * as kl from "kolorist";
import { parseId } from "./utils.mjs";
export function preactDevtoolsPlugin(_a) {
    var _b = _a.injectInProd, injectInProd = _b === void 0 ? false : _b, shouldTransform = _a.shouldTransform;
    var log = debug("vite:preact-devtools");
    var entry = "";
    var config;
    var found = false;
    var plugin = {
        name: "preact:devtools",
        // Ensure that we resolve before everything else
        enforce: "pre",
        config: function () {
            return {
                optimizeDeps: {
                    include: ["preact/debug", "preact/devtools"]
                }
            };
        },
        configResolved: function (resolvedConfig) {
            config = resolvedConfig;
        },
        resolveId: function (url, importer) {
            if (importer === void 0) { importer = ""; }
            var id = parseId(url).id;
            // Get the main entry file to inject into
            if (!found && /\.html$/.test(importer) && shouldTransform(id)) {
                found = true;
                entry = normalizePath(path.join(config.root, id));
                // TODO: Vite types require explicit return
                // undefined here. They're lacking the "void" type
                // in their declarations
                return undefined;
            }
        },
        transform: function (code, url) {
            var id = parseId(url).id;
            if (entry === id && (!config.isProduction || injectInProd)) {
                var source = injectInProd ? "preact/devtools" : "preact/debug";
                code = "import \"" + source + "\";\n" + code;
                log("[inject] " + kl.cyan(source) + " -> " + kl.dim(id));
                return code;
            }
        }
    };
    return plugin;
}
